{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Python OOPs Theory Questions Answers -"
      ],
      "metadata": {
        "id": "I0698YJktp6A"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1- What is Object-Oriented Programming (OOP) ?"
      ],
      "metadata": {
        "id": "DI2_CE22uCJX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans - Object oriented programming is defined as a programming paradigm ( and not a specific language) built on the concept of objects, i.e.,a set of data contained in fields, and code , indicating procedure - instead of the usal logic - based system."
      ],
      "metadata": {
        "id": "TXMvuF8XuLv1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "2- What is a class in OOP ?"
      ],
      "metadata": {
        "id": "1lz-IF5EvX6Z"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans-In OOP a calss is a template that defines that variables and methods for a specific type of object.It is used to create and manage new objects."
      ],
      "metadata": {
        "id": "0t995YntviDn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "3-What is an object in OOP ?"
      ],
      "metadata": {
        "id": "3v2VfaGMwNLm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans - In OOP an object is a fundamental building block that represents a real word entity with specific properties ( data) and behaviours ( functions), essentially acting as a self contained unit with the ability to interact with other objects within a program."
      ],
      "metadata": {
        "id": "A406unMuwXTr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "4- What is the difference between abstraction and encapsulation ?"
      ],
      "metadata": {
        "id": "rUlZChWyxRgD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans - Abstraction is a design - level process that focuses on what an object does, while encapsulation is a way to control access to an object's data."
      ],
      "metadata": {
        "id": "tyYZ2kOHxfmB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "5- What are dunder methods in Python ?"
      ],
      "metadata": {
        "id": "N7Y-gntYyHk8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans - Dunder method also known as magic method or special method are predefined methods in Python that allows you to customise the behaviour of your objects. They are recognised by the double underscore format such as __init__ or __str__."
      ],
      "metadata": {
        "id": "4G2cqn_EyQqE"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "Emq_i0uby-jx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "6- Explain the concept of inheritance in OOP ?"
      ],
      "metadata": {
        "id": "3eUVlXvnzBst"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans- Inheritance in object oriented programming is a mechanism that allows a class to inherit properties and behaviour from another class. This allows programmers to create new classes that are based on existing classes."
      ],
      "metadata": {
        "id": "A8z7sKkTzLxM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "7-What is polymorphism in OOP ?"
      ],
      "metadata": {
        "id": "oGG-8jpMz65A"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans - Ans - Polymorphism is a feature of object oriented programming language that allows a specific routine to use variables of different types at different times.\n"
      ],
      "metadata": {
        "id": "yNlZJlhI4-s_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "WP0bvJgY5E1l"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "8- How is encapsulation achieved in Python ?"
      ],
      "metadata": {
        "id": "D6J1ctJt5GyO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans - Encapsulation in Python is achieved by using access modifiers to kya control access to a class's variables and methods.These acess modifiers include public, private, and protected."
      ],
      "metadata": {
        "id": "uWqM1t6b5PVH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "9-What is a constructor in Python ?"
      ],
      "metadata": {
        "id": "_4_XxhwLnq9d"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans - A constructor in Python is a special method that is automatically called when a class object is created. Its used to initialize tha objects attributes and set up its intial State."
      ],
      "metadata": {
        "id": "H5ua86zJoE_c"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "10-What are class and static methods in Python ?"
      ],
      "metadata": {
        "id": "uH0zY2WMop1v"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "A class meyhod can access or modify the class rate while a static method can't access or modify it."
      ],
      "metadata": {
        "id": "MMz3h579ozAm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "11-What is method overloading in Python ?\n"
      ],
      "metadata": {
        "id": "WoBIdO9epH9L"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans - Method overloading in Python is the ability to define multiple methods with the same name but different parameters."
      ],
      "metadata": {
        "id": "T6I1HHdopRp2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "12-What is method overriding in OOP ?\n"
      ],
      "metadata": {
        "id": "WrqQ375_pnmt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans - Method overriding is a concept in Python that allows a subclass to provide its own implementation of a method defined in its superclass ."
      ],
      "metadata": {
        "id": "wc8MpzUFpvwG"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "13-What is a property decorator in Python ?"
      ],
      "metadata": {
        "id": "hjYYvw7qqKt3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans - The Python property decorator makes attributes in a class act like read-only properties."
      ],
      "metadata": {
        "id": "EyLNvDjJqS0h"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "14-Why is polymorphism important in OOP ?"
      ],
      "metadata": {
        "id": "bcJSaz3qqqOc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans - Because it is an important feature of OOP and allows programmers to write more sufficient and flexible code . it also makes it easier to maintain and update software over time."
      ],
      "metadata": {
        "id": "vp_75rXHqz29"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "15-What is an abstract class in Python ?"
      ],
      "metadata": {
        "id": "TJFL3YZ8rY-n"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans - An abstract class in Python is a class that can't be instantiated on its own , but is used as blueprint for other classes."
      ],
      "metadata": {
        "id": "AH0z-OZxrf6n"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "16-What are the advantages of OOP ?"
      ],
      "metadata": {
        "id": "gOCXQcTtr2-r"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans - OPP has many advantages like improved code organisation, reusability, flexibility, modularity , security , problem solving etc."
      ],
      "metadata": {
        "id": "X5bO1fq4r9kJ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "17-What is the difference between a class variable and an instance variable ?"
      ],
      "metadata": {
        "id": "OqxJmzqCseIp"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans - A class variable is a variable defined at the class level, meaning there is only one copy of it shared across all instances of that calss while an instance is a specific object created from that class ."
      ],
      "metadata": {
        "id": "wFvndXEwsmTM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "18-What is multiple inheritance in Python ?"
      ],
      "metadata": {
        "id": "mXpX-PjHtScK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans- In Python, multiple inheritance is a feature that lets a class inherit attribute and methods from more than one parent Class."
      ],
      "metadata": {
        "id": "wiq68Q8z53gw"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "19-Explain the purpose of ‘’__str__’ and ‘__repr__’ ‘ methods in Python ?"
      ],
      "metadata": {
        "id": "6iRtkyu46jzw"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans - In Python, the __stt__() and __repr__() methods are used to return string representation of objects. __str__ () is used to create a readable representation for users while __repr__() is used to create a detailed representation for developers."
      ],
      "metadata": {
        "id": "3bQBgZV_6w-s"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "20- What is the significance of the ‘super()’ function in Python ?"
      ],
      "metadata": {
        "id": "u58kgH7J7zyw"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans- In Python the super () function is Used to access method and attributes of a parent class from within a child class, allowing you to a cl call the parent class functionally within an overridden methods."
      ],
      "metadata": {
        "id": "SmdIlgYA77s5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "21-What is the significance of the __del__ method in Python ?"
      ],
      "metadata": {
        "id": "aZEMqHvG8nb4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans - In Python the __del__ method also known as a destructor is a special method that called automatically when an object is about to be removed from memory by the garbage collector essentially allowing you to perform cleanup tasks like releasing resources held by the object before it is finally deleted."
      ],
      "metadata": {
        "id": "3Rj9gM5G8uqp"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "22- What is the difference between @staticmethod and @classmethod in Python ?"
      ],
      "metadata": {
        "id": "oL6wFW7w9gmr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans - In Python the main difference between @classmethod and @staticmethod is that class method can access and modify class attributes while static method cannot."
      ],
      "metadata": {
        "id": "fPUWzzLE-c1_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "23-How does polymorphism work in Python with inheritance ?"
      ],
      "metadata": {
        "id": "ypuFDo22-9Fd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans- In Python, polymorphism with inheritance allows child classes to have the same method names as their parent class."
      ],
      "metadata": {
        "id": "ac5Gl8Pz_Hee"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "24-What is method chaining in Python OOP ?"
      ],
      "metadata": {
        "id": "CXQc21ni_-SF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans- Method chaining is a syntax in Python that allows you to call multiple methods on an object in a single line of code ."
      ],
      "metadata": {
        "id": "k-BmOq8zAHYQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "25-What is the purpose of the __call__ method in Python?"
      ],
      "metadata": {
        "id": "j7J3_8UsCiRB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans- The __call__ method in Python allows programmers to write classes that behave like function. This is allow the instances of the class to be called like function."
      ],
      "metadata": {
        "id": "5Le65RTKCuVp"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "GRFfNCrgDSQz"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Practical Questions Answers --"
      ],
      "metadata": {
        "id": "3j9wZOgpDTEd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Demonstrate runtime polymorphism using a method play() in a base class Instrument. Derive classes Guitar and Piano that implement their own version of play().\n",
        "...\n",
        "# Base class Instrument\n",
        "class Instrument:\n",
        "    def play(self):\n",
        "            raise NotImplementedError(\"Subclass must implement abstract method\")\n",
        "\n",
        "            # Derived class Guitar\n",
        "            class Guitar(Instrument):\n",
        "                def play(self):\n",
        "                        print(\"Strumming the guitar!\")\n",
        "\n",
        "                        # Derived class Piano\n",
        "                        class Piano(Instrument):\n",
        "                            def play(self):\n",
        "                                    print(\"Playing the piano keys!\")\n",
        "\n",
        "                                    # Demonstrating runtime polymorphism\n",
        "                                    def perform_play(instrument: Instrument):\n",
        "                                        instrument.play()\n",
        "\n",
        "                                        # Creating objects of Guitar and Piano\n",
        "                                        guitar = Guitar()\n",
        "                                        piano = Piano()\n",
        "\n",
        "                                        # Performing play for each instrument\n",
        "                                        perform_play(guitar)  # Output: Strumming the guitar!\n",
        "                                        perform_play(piano)   # Output: Playing the piano keys!"
      ],
      "metadata": {
        "id": "jnSOtme8vMOV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a class MathOperations with a class method add_numbers() to add two numbers and a static method subtract_numbers() to subtract two numbers.\n",
        "...\n",
        "class MathOperations:\n",
        "      # Class method to add two numbers\n",
        "          @classmethod\n",
        "              def add_numbers(cls, num1, num2):\n",
        "                      return num1 + num2\n",
        "\n",
        "                          # Static method to subtract two numbers\n",
        "                              @staticmethod\n",
        "                                  def subtract_numbers(num1, num2):\n",
        "                                          return num1 - num2\n",
        "\n",
        "                                          # Demonstrating the usage of class method and static method\n",
        "                                          result_add = MathOperations.add_numbers(10, 5)\n",
        "                                          result_subtract = MathOperations.subtract_numbers(10, 5)\n",
        "\n",
        "                                          print(f\"Sum: {result_add}\")         # Output: Sum: 15\n",
        "                                          print(f\"Difference: {result_subtract}\")  # Output: Difference: 5\n"
      ],
      "metadata": {
        "id": "AGnXp3JQwAQT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Parent class Animal\n",
        "class Animal:\n",
        "    def speak(self):\n",
        "            print(\"Animal makes a sound\")\n",
        "\n",
        "            # Child class Dog\n",
        "            class Dog(Animal):\n",
        "                def speak(self):\n",
        "                        print(\"Bark!\")\n",
        "\n",
        "                        # Creating an object of Dog\n",
        "                        dog = Dog()\n",
        "                        dog.speak()  # Output: Bark!"
      ],
      "metadata": {
        "id": "xzNuJHn_t2ZC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a parent class Animal with a method speak() that prints a generic message. Create a child class Dog\n",
        "that overrides the speak() method to print \"Bark!\"."
      ],
      "metadata": {
        "id": "mXnqF9-S4DU2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "b1BlYURNaFrW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from abc import abstractmethod\n",
        "# Write a program to create an abstract class shape with a method area().\n",
        "...\n",
        "from abc import ABC, abstractmethod\n",
        "class shape(ABC):\n",
        "  @abstractmethod\n",
        "  def area(self):\n",
        "    pass"
      ],
      "metadata": {
        "id": "Hq9oudkCX_f0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Implement a multi-level inheritance scenario where a class Vehicle has an attribute type.\n",
        "...\n",
        "class Vehicle:\n",
        "  def __init__self(self, type):\n",
        "    self.type = type"
      ],
      "metadata": {
        "id": "5zKbmjY0dk1N"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Write a class Fraction with attributes numerator and denominator. Override the str method to display the fraction as \"numerator/denominator\".\n",
        "...\n",
        "class Fraction:\n",
        "    def __init__(self, numerator, denominator):\n",
        "        self.numerator = numerator\n",
        "        self.denominator = denominator\n",
        "\n",
        "    def __str__(self):\n",
        "        return f\"{self.numerator}/{self.denominator}\"\n",
        "\n",
        "# Example usage\n",
        "f1 = Fraction(3, 4)\n",
        "f2 = Fraction(5, 6)\n",
        "\n",
        "print(f1)  # Output: 3/4\n",
        "print(f2)  # Output: 5/6"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I3MPVFByyiet",
        "outputId": "ae26ad04-3361-46f8-c7e5-473f3749f341"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3/4\n",
            "5/6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Demonstrate operator overloading by creating a class Vector and overriding the add method to add two vectors.\n",
        "...\n",
        "class Vector:\n",
        "    def __init__(self, x, y):\n",
        "        self.x = x\n",
        "        self.y = y\n",
        "\n",
        "    def __add__(self, other):\n",
        "        return Vector(self.x + other.x, self.y + other.y)\n",
        "\n",
        "    def __str__(self):\n",
        "        return f\"({self.x}, {self.y})\"\n",
        "\n",
        "# Example usage\n",
        "v1 = Vector(2, 3)\n",
        "v2 = Vector(4, 5)\n",
        "v3 = v1 + v2\n",
        "\n",
        "print(v3)  # Output: (6, 8)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r1kV7bxty7k8",
        "outputId": "3c5b90b6-fdd4-4bce-f2be-6e9a096c3176"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(6, 8)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a class Person with attributes name and age. Add a method greet() that prints \"Hello, my name is {name} and I am {age} years old.\"\n",
        "...\n",
        "class Person:\n",
        "    def __init__(self, name, age):\n",
        "        self.name = name\n",
        "        self.age = age\n",
        "\n",
        "    def greet(self):\n",
        "        print(f\"Hello, my name is {self.name} and I am {self.age} years old.\")\n",
        "\n",
        "# Example usage\n",
        "p1 = Person(\"Alice\", 30)\n",
        "p2 = Person(\"Bob\", 25)\n",
        "\n",
        "p1.greet()  # Output: Hello, my name is Alice and I am 30 years old.\n",
        "p2.greet()  # Output: Hello, my name is Bob and I am 25 years old."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y0H2xf8vzps8",
        "outputId": "19d8ad84-04f5-4c83-807c-b005396313b2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, my name is Alice and I am 30 years old.\n",
            "Hello, my name is Bob and I am 25 years old.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Create a class Rectangle with methods set_dimensions() to set the dimensions and area() to calculate the area.\n",
        "...\n",
        "class Rectangle:\n",
        "    def __init__(self):\n",
        "        self.width = 0\n",
        "        self.height = 0\n",
        "\n",
        "    def set_dimensions(self, width, height):\n",
        "        self.width = width\n",
        "        self.height = height\n",
        "\n",
        "    def area(self):\n",
        "        return self.width * self.height\n",
        "\n",
        "# Example usage\n",
        "rect = Rectangle()\n",
        "rect.set_dimensions(5, 10)\n",
        "print(rect.area())  # Output: 50"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C4h6NDr30HJU",
        "outputId": "ab2e173d-8ff9-471e-af16-cabe1093ba28"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "50\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a class Employee with a method calculate_salary() that computes the salary based on hours worked and hourly rate. Create a derived class Manager that adds a bonus to the salary.\n",
        "...\n",
        "class Employee:\n",
        "    def __init__(self, name, hours_worked, hourly_rate):\n",
        "        self.name = name\n",
        "        self.hours_worked = hours_worked\n",
        "        self.hourly_rate = hourly_rate\n",
        "\n",
        "    def calculate_salary(self):\n",
        "        return self.hours_worked * self.hourly_rate\n",
        "\n",
        "class Manager(Employee):\n",
        "    def __init__(self, name, hours_worked, hourly_rate, bonus):\n",
        "        super().__init__(name, hours_worked, hourly_rate)\n",
        "        self.bonus = bonus\n",
        "\n",
        "    def calculate_salary(self):\n",
        "        return super().calculate_salary() + self.bonus\n",
        "\n",
        "# Example usage\n",
        "emp = Employee(\"Alice\", 40, 20)\n",
        "mgr = Manager(\"Bob\", 40, 30, 500)\n",
        "\n",
        "print(emp.calculate_salary())  # Output: 800\n",
        "print(mgr.calculate_salary())  # Output: 1700"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HXIpQAKC0ef7",
        "outputId": "cde0c1a9-5829-4b12-939b-a074809d6ceb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "800\n",
            "1700\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#  Create a class Product with attributes name, price, and quantity. Implement a method total_price() that calculates the total price of the product.\n",
        "...\n",
        "class Product:\n",
        "    def __init__(self, name, price, quantity):\n",
        "        self.name = name\n",
        "        self.price = price\n",
        "        self.quantity = quantity\n",
        "\n",
        "    def total_price(self):\n",
        "        return self.price * self.quantity\n",
        "\n",
        "# Example usage\n",
        "product1 = Product(\"Laptop\", 1000, 2)\n",
        "print(f\"Total price of {product1.name}: ${product1.total_price()}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lBXmNBj905br",
        "outputId": "edc41b7e-13b6-4e60-f97e-76e1a5bb78ee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total price of Laptop: $2000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a class Animal with an abstract method sound(). Create two derived classes Cow and Sheep that implement the sound() method.\n",
        "...\n",
        "from abc import ABC, abstractmethod\n",
        "\n",
        "# Abstract base class\n",
        "class Animal(ABC):\n",
        "    @abstractmethod\n",
        "    def sound(self):\n",
        "        pass\n",
        "\n",
        "# Derived class Cow\n",
        "class Cow(Animal):\n",
        "    def sound(self):\n",
        "        return \"Moo\"\n",
        "\n",
        "# Derived class Sheep\n",
        "class Sheep(Animal):\n",
        "    def sound(self):\n",
        "        return \"Baa\"\n",
        "\n",
        "# Example usage\n",
        "cow = Cow()\n",
        "sheep = Sheep()\n",
        "\n",
        "print(f\"Cow sound: {cow.sound()}\")\n",
        "print(f\"Sheep sound: {sheep.sound()}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rt_WHpvU1eoE",
        "outputId": "24b26e22-3f7a-4cf3-cb85-e9b7c1691cbc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cow sound: Moo\n",
            "Sheep sound: Baa\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a class Book with attributes title, author, and year_published. Add a method get_book_info() that returns a formatted string with the book's details.\n",
        "...\n",
        "class Book:\n",
        "    def __init__(self, title, author, year_published):\n",
        "        self.title = title\n",
        "        self.author = author\n",
        "        self.year_published = year_published\n",
        "\n",
        "    def get_book_info(self):\n",
        "        return f\"'{self.title}' by {self.author}, published in {self.year_published}.\"\n",
        "\n",
        "# Example usage\n",
        "book1 = Book(\"To Kill a Mockingbird\", \"Harper Lee\", 1960)\n",
        "print(book1.get_book_info())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7L7tf1qR18kW",
        "outputId": "73f818ce-5606-4052-e800-83be6ae58bab"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "'To Kill a Mockingbird' by Harper Lee, published in 1960.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a class House with attributes address and price. Create a derived class Mansion that adds an attribute number_of_rooms.\n",
        "...\n",
        "class House:\n",
        "    def __init__(self, address, price):\n",
        "        self.address = address\n",
        "        self.price = price\n",
        "\n",
        "    def get_info(self):\n",
        "        return f\"House located at {self.address}, priced at ${self.price}.\"\n",
        "\n",
        "# Derived class Mansion\n",
        "class Mansion(House):\n",
        "    def __init__(self, address, price, number_of_rooms):\n",
        "        super().__init__(address, price)\n",
        "        self.number_of_rooms = number_of_rooms\n",
        "\n",
        "    def get_info(self):\n",
        "        return f\"Mansion at {self.address}, priced at ${self.price}, with {self.number_of_rooms} rooms.\"\n",
        "\n",
        "# Example usage\n",
        "house1 = House(\"123 Main St\", 250000)\n",
        "mansion1 = Mansion(\"456 Luxury Ave\", 5000000, 15)\n",
        "\n",
        "print(house1.get_info())\n",
        "print(mansion1.get_info())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5eMsJsap2d1u",
        "outputId": "a10e874f-e2e7-4390-f892-765bedafef49"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "House located at 123 Main St, priced at $250000.\n",
            "Mansion at 456 Luxury Ave, priced at $5000000, with 15 rooms.\n"
          ]
        }
      ]
    }
  ]
}